{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Project\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport moment from 'moment-timezone';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeeklySchedule = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(moment());\n  const [timezone, setTimezone] = useState('UTC');\n  const [weeklySchedule, setWeeklySchedule] = useState([]);\n  useEffect(() => {\n    fetchData(selectedDate, timezone);\n  }, [selectedDate, timezone]);\n  const fetchData = async (date, tz) => {\n    try {\n      // You can directly import the data.json file\n      const response = await import('./data.json');\n      const data = response.default; // Accessing the default export\n\n      setWeeklySchedule(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n  const handleTimezoneChange = selectedOption => {\n    setTimezone(selectedOption.value);\n  };\n  const loadPreviousWeek = () => {\n    setSelectedDate(selectedDate.clone().subtract(1, 'week'));\n  };\n  const loadNextWeek = () => {\n    setSelectedDate(selectedDate.clone().add(1, 'week'));\n  };\n  const getWorkingDays = startDate => {\n    const days = [];\n    for (let i = 0; i < 5; i++) {\n      days.push(startDate.clone().startOf('week').add(i, 'days'));\n    }\n    return days;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Weekly Schedule\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Current Date: \", selectedDate.format('YYYY-MM-DD')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Timezone:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        options: [{\n          value: 'UTC',\n          label: 'UTC'\n        }, {\n          value: 'America/New_York',\n          label: 'America/New_York'\n        }\n        // Add more timezone options as needed\n        ],\n        value: {\n          value: timezone,\n          label: timezone\n        },\n        onChange: handleTimezoneChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Weekly Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: getWorkingDays(selectedDate).map(day => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: day.format('YYYY-MM-DD')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), weeklySchedule.map(item => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: moment(item.Date).isSame(day, 'day') ? `${item.Time} - ${item.Name}` : ''\n            }, item.Id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this))]\n          }, day.format('YYYY-MM-DD'), true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadPreviousWeek,\n      children: \"Previous Week\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadNextWeek,\n      children: \"Next Week\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(WeeklySchedule, \"NlSjP8sAVrNwFg/TA0Crred5fgY=\");\n_c = WeeklySchedule;\nexport default WeeklySchedule;\nvar _c;\n$RefreshReg$(_c, \"WeeklySchedule\");","map":{"version":3,"names":["React","useState","useEffect","moment","Select","jsxDEV","_jsxDEV","WeeklySchedule","_s","selectedDate","setSelectedDate","timezone","setTimezone","weeklySchedule","setWeeklySchedule","fetchData","date","tz","response","data","default","error","console","handleTimezoneChange","selectedOption","value","loadPreviousWeek","clone","subtract","loadNextWeek","add","getWorkingDays","startDate","days","i","push","startOf","children","fileName","_jsxFileName","lineNumber","columnNumber","format","options","label","onChange","map","day","item","Date","isSame","Time","Name","Id","onClick","_c","$RefreshReg$"],"sources":["D:/React Project/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport moment from 'moment-timezone';\nimport Select from 'react-select';\n\nconst WeeklySchedule = () => {\n  const [selectedDate, setSelectedDate] = useState(moment());\n  const [timezone, setTimezone] = useState('UTC');\n  const [weeklySchedule, setWeeklySchedule] = useState([]);\n\n  useEffect(() => {\n    fetchData(selectedDate, timezone);\n  }, [selectedDate, timezone]);\n\n  const fetchData = async (date, tz) => {\n    try {\n      // You can directly import the data.json file\n      const response = await import('./data.json');\n      const data = response.default; // Accessing the default export\n\n      setWeeklySchedule(data);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  };\n\n  const handleTimezoneChange = (selectedOption) => {\n    setTimezone(selectedOption.value);\n  };\n\n  const loadPreviousWeek = () => {\n    setSelectedDate(selectedDate.clone().subtract(1, 'week'));\n  };\n\n  const loadNextWeek = () => {\n    setSelectedDate(selectedDate.clone().add(1, 'week'));\n  };\n\n  const getWorkingDays = (startDate) => {\n    const days = [];\n    for (let i = 0; i < 5; i++) {\n      days.push(startDate.clone().startOf('week').add(i, 'days'));\n    }\n    return days;\n  };\n\n  return (\n    <div>\n      <h2>Weekly Schedule</h2>\n\n      <div>\n        <label>Current Date: {selectedDate.format('YYYY-MM-DD')}</label>\n      </div>\n\n      <div>\n        <label>Timezone:</label>\n        <Select\n          options={[\n            { value: 'UTC', label: 'UTC' },\n            { value: 'America/New_York', label: 'America/New_York' },\n            // Add more timezone options as needed\n          ]}\n          value={{ value: timezone, label: timezone }}\n          onChange={handleTimezoneChange}\n        />\n      </div>\n\n      {/* Display weekly schedule */}\n      <div>\n        <h3>Weekly Schedule</h3>\n        <table>\n          <tbody>\n            {getWorkingDays(selectedDate).map((day) => (\n              <tr key={day.format('YYYY-MM-DD')}>\n                <td>{day.format('YYYY-MM-DD')}</td>\n                {weeklySchedule.map((item) => (\n                  <td key={item.Id}>\n                    {moment(item.Date).isSame(day, 'day') ? `${item.Time} - ${item.Name}` : ''}\n                  </td>\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Add Previous & Next buttons to move between weeks */}\n      <button onClick={loadPreviousWeek}>Previous Week</button>\n      <button onClick={loadNextWeek}>Next Week</button>\n    </div>\n  );\n};\n\nexport default WeeklySchedule;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}